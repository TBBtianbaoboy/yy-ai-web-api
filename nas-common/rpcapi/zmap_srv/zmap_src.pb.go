// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.18.1
// source: zmap_srv/zmap_src.proto

package zmap_srv

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ScanType int32

const (
	ScanType_FASTMODE    ScanType = 0
	ScanType_MOSTCOMMON  ScanType = 1
	ScanType_PORTRANGE   ScanType = 2
	ScanType_PORTSINGLE  ScanType = 3
	ScanType_PORTSERVICE ScanType = 4
	ScanType_DEFAULT     ScanType = 5
)

// Enum value maps for ScanType.
var (
	ScanType_name = map[int32]string{
		0: "FASTMODE",
		1: "MOSTCOMMON",
		2: "PORTRANGE",
		3: "PORTSINGLE",
		4: "PORTSERVICE",
		5: "DEFAULT",
	}
	ScanType_value = map[string]int32{
		"FASTMODE":    0,
		"MOSTCOMMON":  1,
		"PORTRANGE":   2,
		"PORTSINGLE":  3,
		"PORTSERVICE": 4,
		"DEFAULT":     5,
	}
)

func (x ScanType) Enum() *ScanType {
	p := new(ScanType)
	*p = x
	return p
}

func (x ScanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanType) Descriptor() protoreflect.EnumDescriptor {
	return file_zmap_srv_zmap_src_proto_enumTypes[0].Descriptor()
}

func (ScanType) Type() protoreflect.EnumType {
	return &file_zmap_srv_zmap_src_proto_enumTypes[0]
}

func (x ScanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanType.Descriptor instead.
func (ScanType) EnumDescriptor() ([]byte, []int) {
	return file_zmap_srv_zmap_src_proto_rawDescGZIP(), []int{0}
}

type DeliverScanIpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanId          string   `protobuf:"bytes,1,opt,name=scan_id,json=scanId,proto3" json:"scan_id,omitempty"`
	ScanIp          string   `protobuf:"bytes,2,opt,name=scan_ip,json=scanIp,proto3" json:"scan_ip,omitempty"`
	ScanType        ScanType `protobuf:"varint,3,opt,name=scan_type,json=scanType,proto3,enum=zmap_srv.ScanType" json:"scan_type,omitempty"`
	WithService     bool     `protobuf:"varint,4,opt,name=with_service,json=withService,proto3" json:"with_service,omitempty"`
	WithOs          bool     `protobuf:"varint,5,opt,name=with_os,json=withOs,proto3" json:"with_os,omitempty"`
	WithScript      bool     `protobuf:"varint,6,opt,name=with_script,json=withScript,proto3" json:"with_script,omitempty"`
	WithTrace       bool     `protobuf:"varint,7,opt,name=with_trace,json=withTrace,proto3" json:"with_trace,omitempty"`
	ScanTypeMessage string   `protobuf:"bytes,8,opt,name=scan_type_message,json=scanTypeMessage,proto3" json:"scan_type_message,omitempty"`
}

func (x *DeliverScanIpReq) Reset() {
	*x = DeliverScanIpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zmap_srv_zmap_src_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverScanIpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverScanIpReq) ProtoMessage() {}

func (x *DeliverScanIpReq) ProtoReflect() protoreflect.Message {
	mi := &file_zmap_srv_zmap_src_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverScanIpReq.ProtoReflect.Descriptor instead.
func (*DeliverScanIpReq) Descriptor() ([]byte, []int) {
	return file_zmap_srv_zmap_src_proto_rawDescGZIP(), []int{0}
}

func (x *DeliverScanIpReq) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

func (x *DeliverScanIpReq) GetScanIp() string {
	if x != nil {
		return x.ScanIp
	}
	return ""
}

func (x *DeliverScanIpReq) GetScanType() ScanType {
	if x != nil {
		return x.ScanType
	}
	return ScanType_FASTMODE
}

func (x *DeliverScanIpReq) GetWithService() bool {
	if x != nil {
		return x.WithService
	}
	return false
}

func (x *DeliverScanIpReq) GetWithOs() bool {
	if x != nil {
		return x.WithOs
	}
	return false
}

func (x *DeliverScanIpReq) GetWithScript() bool {
	if x != nil {
		return x.WithScript
	}
	return false
}

func (x *DeliverScanIpReq) GetWithTrace() bool {
	if x != nil {
		return x.WithTrace
	}
	return false
}

func (x *DeliverScanIpReq) GetScanTypeMessage() string {
	if x != nil {
		return x.ScanTypeMessage
	}
	return ""
}

type DeliverScanIpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//响应码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DeliverScanIpResp) Reset() {
	*x = DeliverScanIpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zmap_srv_zmap_src_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverScanIpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverScanIpResp) ProtoMessage() {}

func (x *DeliverScanIpResp) ProtoReflect() protoreflect.Message {
	mi := &file_zmap_srv_zmap_src_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverScanIpResp.ProtoReflect.Descriptor instead.
func (*DeliverScanIpResp) Descriptor() ([]byte, []int) {
	return file_zmap_srv_zmap_src_proto_rawDescGZIP(), []int{1}
}

func (x *DeliverScanIpResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_zmap_srv_zmap_src_proto protoreflect.FileDescriptor

var file_zmap_srv_zmap_src_proto_rawDesc = []byte{
	0x0a, 0x17, 0x7a, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x72, 0x76, 0x2f, 0x7a, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x72, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x7a, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x72, 0x76, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x63, 0x61, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x7a, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x65, 0x0a, 0x08,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x53, 0x54,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x53, 0x54, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x05, 0x32, 0x55, 0x0a, 0x07, 0x5a, 0x6d, 0x61, 0x70, 0x53, 0x72, 0x76, 0x12, 0x4a,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x70, 0x12,
	0x1a, 0x2e, 0x7a, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x7a, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1c, 0x5a, 0x1a, 0x6e, 0x61,
	0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2f,
	0x7a, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x72, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zmap_srv_zmap_src_proto_rawDescOnce sync.Once
	file_zmap_srv_zmap_src_proto_rawDescData = file_zmap_srv_zmap_src_proto_rawDesc
)

func file_zmap_srv_zmap_src_proto_rawDescGZIP() []byte {
	file_zmap_srv_zmap_src_proto_rawDescOnce.Do(func() {
		file_zmap_srv_zmap_src_proto_rawDescData = protoimpl.X.CompressGZIP(file_zmap_srv_zmap_src_proto_rawDescData)
	})
	return file_zmap_srv_zmap_src_proto_rawDescData
}

var file_zmap_srv_zmap_src_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zmap_srv_zmap_src_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zmap_srv_zmap_src_proto_goTypes = []interface{}{
	(ScanType)(0),             // 0: zmap_srv.ScanType
	(*DeliverScanIpReq)(nil),  // 1: zmap_srv.DeliverScanIpReq
	(*DeliverScanIpResp)(nil), // 2: zmap_srv.DeliverScanIpResp
}
var file_zmap_srv_zmap_src_proto_depIdxs = []int32{
	0, // 0: zmap_srv.DeliverScanIpReq.scan_type:type_name -> zmap_srv.ScanType
	1, // 1: zmap_srv.ZmapSrv.DeliverScanIp:input_type -> zmap_srv.DeliverScanIpReq
	2, // 2: zmap_srv.ZmapSrv.DeliverScanIp:output_type -> zmap_srv.DeliverScanIpResp
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_zmap_srv_zmap_src_proto_init() }
func file_zmap_srv_zmap_src_proto_init() {
	if File_zmap_srv_zmap_src_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zmap_srv_zmap_src_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverScanIpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zmap_srv_zmap_src_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverScanIpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zmap_srv_zmap_src_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zmap_srv_zmap_src_proto_goTypes,
		DependencyIndexes: file_zmap_srv_zmap_src_proto_depIdxs,
		EnumInfos:         file_zmap_srv_zmap_src_proto_enumTypes,
		MessageInfos:      file_zmap_srv_zmap_src_proto_msgTypes,
	}.Build()
	File_zmap_srv_zmap_src_proto = out.File
	file_zmap_srv_zmap_src_proto_rawDesc = nil
	file_zmap_srv_zmap_src_proto_goTypes = nil
	file_zmap_srv_zmap_src_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZmapSrvClient is the client API for ZmapSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZmapSrvClient interface {
	DeliverScanIp(ctx context.Context, in *DeliverScanIpReq, opts ...grpc.CallOption) (*DeliverScanIpResp, error)
}

type zmapSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewZmapSrvClient(cc grpc.ClientConnInterface) ZmapSrvClient {
	return &zmapSrvClient{cc}
}

func (c *zmapSrvClient) DeliverScanIp(ctx context.Context, in *DeliverScanIpReq, opts ...grpc.CallOption) (*DeliverScanIpResp, error) {
	out := new(DeliverScanIpResp)
	err := c.cc.Invoke(ctx, "/zmap_srv.ZmapSrv/DeliverScanIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZmapSrvServer is the server API for ZmapSrv service.
type ZmapSrvServer interface {
	DeliverScanIp(context.Context, *DeliverScanIpReq) (*DeliverScanIpResp, error)
}

// UnimplementedZmapSrvServer can be embedded to have forward compatible implementations.
type UnimplementedZmapSrvServer struct {
}

func (*UnimplementedZmapSrvServer) DeliverScanIp(context.Context, *DeliverScanIpReq) (*DeliverScanIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverScanIp not implemented")
}

func RegisterZmapSrvServer(s *grpc.Server, srv ZmapSrvServer) {
	s.RegisterService(&_ZmapSrv_serviceDesc, srv)
}

func _ZmapSrv_DeliverScanIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverScanIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZmapSrvServer).DeliverScanIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zmap_srv.ZmapSrv/DeliverScanIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZmapSrvServer).DeliverScanIp(ctx, req.(*DeliverScanIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZmapSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zmap_srv.ZmapSrv",
	HandlerType: (*ZmapSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliverScanIp",
			Handler:    _ZmapSrv_DeliverScanIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zmap_srv/zmap_src.proto",
}
